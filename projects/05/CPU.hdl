// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    And(a=instruction[15],b=instruction[3],out=writeM); //writeM done very simply

    And(a=ALUng,b=instruction[2],out=jumpneg); //building the jump
    And(a=ALUzr,b=instruction[1],out=jumpzer); //still building
    Or(a=ALUzr,b=ALUng,out=nonpositive); 
    Not(in=nonpositive,out=ALUpos); //making a "positive" bit
    And(a=ALUpos,b=instruction[0],out=jumppos); //creating the positive

    Or(a=jumpneg,b=jumpzer,out=jumpv1);
    Or(a=jumpv1,b=jumppos,out=jumpv2);

    And(a=jumpv2, b=instruction[15], out=jumpload); //final jump bit created, must be a computation step

    PC(in=Aout,load=jumpload,inc=true,reset=reset,out[0..14]=pc);
    
/* Loading Registers */

    Not(in=instruction[15],out=Nin15); //selecting instruction type
    
//Input to A should be ALUOut if that bit is set
    Mux16(a=instruction,b=ALUOut,sel=instruction[15],out=Ain);

//A should be loaded if either it's an @ function or if the output of the ALU is sent there    
    And(a=instruction[5],b=instruction[15],out=Aload1);
    Or(a=Aload1,b=Nin15,out=Aload);

    ARegister(in=Ain,load=Aload,out=Aout,out[0..14]=addressM);

/* D Register */

    And(a=instruction[4],b=instruction[15],out=Dload);

    DRegister(in=ALUOut,load=Dload,out=Dout);

    Mux16(a=Aout,b=inM,sel=instruction[12],out=MAOut);

    ALU(x=Dout,y=MAOut,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUOut,zr=ALUzr,ng=ALUng,out=outM);


}
